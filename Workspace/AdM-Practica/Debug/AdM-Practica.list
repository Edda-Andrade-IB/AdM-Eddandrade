
AdM-Practica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025ac  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002770  08002770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002800  08002800  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002800  08002800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002808  08002808  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002808  08002808  00012808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800280c  0800280c  0001280c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  0800281c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  0800281c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_line   000091ce  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 0000008e  00000000  00000000  0002924d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   000084b4  00000000  00000000  000292db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000015fd  00000000  00000000  0003178f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000006e8  00000000  00000000  00032d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4624  00000000  00000000  00033478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000531  00000000  00000000  000f7a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002015c  00000000  00000000  000f7fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001af8  00000000  00000000  0011812c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002758 	.word	0x08002758

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002758 	.word	0x08002758

08000204 <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 8000204:	df00      	svc	0
        bx lr
 8000206:	4770      	bx	lr

08000208 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 8000208:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 800020a:	4770      	bx	lr

0800020c <asm_zeros>:
@   r1: longitud
@
.thumb_func
    asm_zeros:
    	// Guardas de seguridad
    	cbz r0, exit
 800020c:	b130      	cbz	r0, 800021c <exit>
    	cbz r1, exit
 800020e:	b129      	cbz	r1, 800021c <exit>

    	mov r2, #0 // Cargo el valor 0 en r2
 8000210:	f04f 0200 	mov.w	r2, #0

08000214 <loop>:

    	loop:
    		subs r1, #1 // Decremento en uno el "contador"
 8000214:	3901      	subs	r1, #1
    		str r2, [r0, r1, LSL #2] // *(r0 + (r1<<2)) = r2
 8000216:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    		bne loop
 800021a:	d1fb      	bne.n	8000214 <loop>

0800021c <exit>:

    	exit:
	        bx lr
 800021c:	4770      	bx	lr

0800021e <asm_producto_escalar32>:
@   r2: longitud
@   r3: escalar
@
.thumb_func
    asm_producto_escalar32:
    	push {r4}
 800021e:	b410      	push	{r4}

08000220 <loop_producto_escalar32>:

    	loop_producto_escalar32:
    		subs r2, #1 // Decremento en uno el "contador"
 8000220:	3a01      	subs	r2, #1

    		ldr r4, [r0, r2, LSL #2] // Guardo en r4 (auxiliar) *(r0 + (r2<<2)) = r4
 8000222:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]

    		//mul Rd, Rn, Rm -> Rd = Rn*Rm
    		mul r4, r4, r3 // r4 = r4*r3 (r3 ganancia)
 8000226:	fb04 f403 	mul.w	r4, r4, r3
    		str r4, [r1, r2, LSL #2] // *(r1 + (r2<<2)) = r4 (equivalente a decir que escribo el producto por un escalar en el vector de salida)
 800022a:	f841 4022 	str.w	r4, [r1, r2, lsl #2]

    		bne loop_producto_escalar32
 800022e:	d1f7      	bne.n	8000220 <loop_producto_escalar32>

		pop {r4}
 8000230:	bc10      	pop	{r4}

08000232 <exit_producto_escalar32>:
    	exit_producto_escalar32:
	        bx lr
 8000232:	4770      	bx	lr

08000234 <asm_producto_escalar16>:
@   r2: longitud
@   r3: escalar
@
.thumb_func
    asm_producto_escalar16:
    	push {r4}
 8000234:	b410      	push	{r4}

08000236 <loop_producto_escalar16>:

    	loop_producto_escalar16:
    		subs r2, #1 // Decremento en uno el "contador"
 8000236:	3a01      	subs	r2, #1

    		ldrh r4, [r0, r2, LSL #1] // Guardo en r4 (auxiliar) *(r0 + (r2<<1)) = r4
 8000238:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]

    		//mul Rd, Rn, Rm -> Rd = Rn*Rm
    		mul r4, r4, r3 // r4 = r4*r3 (r3 ganancia)
 800023c:	fb04 f403 	mul.w	r4, r4, r3
    		strh r4, [r1, r2, LSL #1] // *(r1 + (r2<<2)) = r4 (equivalente a decir que escribo el producto por un escalar en el vector de salida)
 8000240:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]

    		bne loop_producto_escalar16
 8000244:	d1f7      	bne.n	8000236 <loop_producto_escalar16>


		pop {r4}
 8000246:	bc10      	pop	{r4}

08000248 <exit_producto_escalar16>:
    	exit_producto_escalar16:
	        bx lr
 8000248:	4770      	bx	lr

0800024a <asm_producto_escalar12>:
@   r2: longitud
@   r3: escalar
@
.thumb_func
    asm_producto_escalar12:
    	push {r4}
 800024a:	b410      	push	{r4}

0800024c <loop_producto_escalar12>:

    	loop_producto_escalar12:
    		subs r2, #1 // Decremento en uno el "contador"
 800024c:	3a01      	subs	r2, #1

    		ldrh r4, [r0, r2, LSL #1] // Guardo en r4 (auxiliar) *(r0 + (r2<<2)) = r4
 800024e:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]

    		//mul Rd, Rn, Rm -> Rd = Rn*Rm
    		mul r4, r4, r3 // r4 = r4*r3 (r3 ganancia)
 8000252:	fb04 f403 	mul.w	r4, r4, r3
    		usat16 r4, #12, r4 // Saturo en 12 bits [0-4095]
 8000256:	f3a4 040c 	usat16	r4, #12, r4
    		strh r4, [r1, r2, LSL #1] // *(r1 + (r2<<2)) = r4 (equivalente a decir que escribo el producto por un escalar en el vector de salida)
 800025a:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]

    		bne loop_producto_escalar12
 800025e:	d1f5      	bne.n	800024c <loop_producto_escalar12>

		pop {r4}
 8000260:	bc10      	pop	{r4}

08000262 <exit_producto_escalar12>:
    	exit_producto_escalar12:
	        bx lr
 8000262:	4770      	bx	lr

08000264 <asm_pack32_to_16>:
@   r1: vector_out
@   r2: longitud
@
.thumb_func
    asm_pack32_to_16:
    	push {r4}
 8000264:	b410      	push	{r4}

08000266 <loop_pack32_to_16>:

    	loop_pack32_to_16:
    		subs r2, #1 // Decremento en uno el "contador"
 8000266:	3a01      	subs	r2, #1

    		ldr r3, [r0, r2, LSL #2]
 8000268:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    		cmp r3, #0	// Equivalente a hacer R3 - 0, lo unico que me interesa aqui es modificar el APSR para ver los flags de signo
 800026c:	2b00      	cmp	r3, #0
    		ite mi // MI -> Minus/negative
 800026e:	bf4c      	ite	mi
    		asrmi r4, r3, #16 // Si el numero es negativo uso un aritmethic shift (ie relleno con 1's por la izquierda para conservar signo)
 8000270:	141c      	asrmi	r4, r3, #16
    		lsrpl r4, r3, #16 // De lo contrario, uso un shift logico nomas (ie relleno con 0's)
 8000272:	0c1c      	lsrpl	r4, r3, #16

    		strh r4, [r1, r2, LSL #1]
 8000274:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]

    		cbz r2, exit_pack32_to_16
 8000278:	b102      	cbz	r2, 800027c <exit_pack32_to_16>
    		b loop_pack32_to_16
 800027a:	e7f4      	b.n	8000266 <loop_pack32_to_16>

0800027c <exit_pack32_to_16>:

    	exit_pack32_to_16:
    		pop {r4}
 800027c:	bc10      	pop	{r4}
	        bx lr
 800027e:	4770      	bx	lr

08000280 <asm_max>:
@   r0: maximo elemento del array
@
.thumb_func
    asm_max:
    	// En r2 voy a guardar el maximo. Arranco inicializandolo con el ultimo elemento del array
    	sub r1, #1 // Decremento en uno el "contador"
 8000280:	f1a1 0101 	sub.w	r1, r1, #1
    	ldr r2, [r0, r1, LSL #2] // *(r0 + (r1<<2)) = r2
 8000284:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    	subs r1, #1 // Decremento en uno el "contador"
 8000288:	3901      	subs	r1, #1

0800028a <loop_max>:

    	loop_max:
    		ldr r3, [r0, r1, LSL #2] // *(r0 + (r1<<2)) = r3 (uso r3 para recorrer el array)
 800028a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]

    		cmp r3, r2
 800028e:	4293      	cmp	r3, r2
    		it gt
 8000290:	bfc8      	it	gt
			movgt r2, r3
 8000292:	461a      	movgt	r2, r3

			subs r1, #1 // Decremento en uno el "contador"
 8000294:	3901      	subs	r1, #1
			bne loop_max
 8000296:	d1f8      	bne.n	800028a <loop_max>

08000298 <exit_max>:

    	exit_max:
    		mov r0, r2
 8000298:	4610      	mov	r0, r2
	        bx lr
 800029a:	4770      	bx	lr

0800029c <asm_mean>:
@   r2: z
@   r3: N
@
.thumb_func
    asm_mean:
    	push {r4, r5}
 800029c:	b430      	push	{r4, r5}

0800029e <loop_mean>:
    	loop_mean:
    		subs r3, #1
 800029e:	3b01      	subs	r3, #1
    		ldrh r4, [r0, r3, LSL #1]
 80002a0:	f830 4013 	ldrh.w	r4, [r0, r3, lsl #1]
    		ldrh r5, [r1, r3, LSL #1]
 80002a4:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
    		add r5, r4
 80002a8:	4425      	add	r5, r4
    		lsr r5, #1
 80002aa:	ea4f 0555 	mov.w	r5, r5, lsr #1
    		strh r5, [r2, r3, LSL #1]
 80002ae:	f822 5013 	strh.w	r5, [r2, r3, lsl #1]
    		cbz r3, exit_mean
 80002b2:	b103      	cbz	r3, 80002b6 <exit_mean>
    		b loop_mean
 80002b4:	e7f3      	b.n	800029e <loop_mean>

080002b6 <exit_mean>:

    	exit_mean:
    		pop {r4, r5}
 80002b6:	bc30      	pop	{r4, r5}
	        bx lr
 80002b8:	4770      	bx	lr

080002ba <asm_mean_simd>:
@   r2: z
@   r3: N
@
.thumb_func
    asm_mean_simd:
    	push {r4, r5}
 80002ba:	b430      	push	{r4, r5}
    	lsr r3, #1 // divido por dos el contador
 80002bc:	ea4f 0353 	mov.w	r3, r3, lsr #1

080002c0 <loop_mean_simd>:

    	loop_mean_simd:
    		subs r3, #1
 80002c0:	3b01      	subs	r3, #1
    		ldr r4, [r0, r3, LSL #2]
 80002c2:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    		ldr r5, [r1, r3, LSL #2]
 80002c6:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    		uhadd16 r5, r5, r4
 80002ca:	fa95 f564 	uhadd16	r5, r5, r4
    		str r5, [r2, r3, LSL #2]
 80002ce:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
    		cbz r3, exit_mean_simd
 80002d2:	b103      	cbz	r3, 80002d6 <exit_mean_simd>
    		b loop_mean
 80002d4:	e7e3      	b.n	800029e <loop_mean>

080002d6 <exit_mean_simd>:

    	exit_mean_simd:
    		pop {r4, r5}
 80002d6:	bc30      	pop	{r4, r5}
	        bx lr
 80002d8:	4770      	bx	lr
	...

080002dc <__aeabi_uldivmod>:
 80002dc:	b953      	cbnz	r3, 80002f4 <__aeabi_uldivmod+0x18>
 80002de:	b94a      	cbnz	r2, 80002f4 <__aeabi_uldivmod+0x18>
 80002e0:	2900      	cmp	r1, #0
 80002e2:	bf08      	it	eq
 80002e4:	2800      	cmpeq	r0, #0
 80002e6:	bf1c      	itt	ne
 80002e8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ec:	f04f 30ff 	movne.w	r0, #4294967295
 80002f0:	f000 b970 	b.w	80005d4 <__aeabi_idiv0>
 80002f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002fc:	f000 f806 	bl	800030c <__udivmoddi4>
 8000300:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000308:	b004      	add	sp, #16
 800030a:	4770      	bx	lr

0800030c <__udivmoddi4>:
 800030c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000310:	9e08      	ldr	r6, [sp, #32]
 8000312:	460d      	mov	r5, r1
 8000314:	4604      	mov	r4, r0
 8000316:	460f      	mov	r7, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14a      	bne.n	80003b2 <__udivmoddi4+0xa6>
 800031c:	428a      	cmp	r2, r1
 800031e:	4694      	mov	ip, r2
 8000320:	d965      	bls.n	80003ee <__udivmoddi4+0xe2>
 8000322:	fab2 f382 	clz	r3, r2
 8000326:	b143      	cbz	r3, 800033a <__udivmoddi4+0x2e>
 8000328:	fa02 fc03 	lsl.w	ip, r2, r3
 800032c:	f1c3 0220 	rsb	r2, r3, #32
 8000330:	409f      	lsls	r7, r3
 8000332:	fa20 f202 	lsr.w	r2, r0, r2
 8000336:	4317      	orrs	r7, r2
 8000338:	409c      	lsls	r4, r3
 800033a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033e:	fa1f f58c 	uxth.w	r5, ip
 8000342:	fbb7 f1fe 	udiv	r1, r7, lr
 8000346:	0c22      	lsrs	r2, r4, #16
 8000348:	fb0e 7711 	mls	r7, lr, r1, r7
 800034c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000350:	fb01 f005 	mul.w	r0, r1, r5
 8000354:	4290      	cmp	r0, r2
 8000356:	d90a      	bls.n	800036e <__udivmoddi4+0x62>
 8000358:	eb1c 0202 	adds.w	r2, ip, r2
 800035c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000360:	f080 811c 	bcs.w	800059c <__udivmoddi4+0x290>
 8000364:	4290      	cmp	r0, r2
 8000366:	f240 8119 	bls.w	800059c <__udivmoddi4+0x290>
 800036a:	3902      	subs	r1, #2
 800036c:	4462      	add	r2, ip
 800036e:	1a12      	subs	r2, r2, r0
 8000370:	b2a4      	uxth	r4, r4
 8000372:	fbb2 f0fe 	udiv	r0, r2, lr
 8000376:	fb0e 2210 	mls	r2, lr, r0, r2
 800037a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037e:	fb00 f505 	mul.w	r5, r0, r5
 8000382:	42a5      	cmp	r5, r4
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x90>
 8000386:	eb1c 0404 	adds.w	r4, ip, r4
 800038a:	f100 32ff 	add.w	r2, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x294>
 8000392:	42a5      	cmp	r5, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x294>
 8000398:	4464      	add	r4, ip
 800039a:	3802      	subs	r0, #2
 800039c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a0:	1b64      	subs	r4, r4, r5
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11e      	cbz	r6, 80003ae <__udivmoddi4+0xa2>
 80003a6:	40dc      	lsrs	r4, r3
 80003a8:	2300      	movs	r3, #0
 80003aa:	e9c6 4300 	strd	r4, r3, [r6]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d908      	bls.n	80003c8 <__udivmoddi4+0xbc>
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f000 80ed 	beq.w	8000596 <__udivmoddi4+0x28a>
 80003bc:	2100      	movs	r1, #0
 80003be:	e9c6 0500 	strd	r0, r5, [r6]
 80003c2:	4608      	mov	r0, r1
 80003c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c8:	fab3 f183 	clz	r1, r3
 80003cc:	2900      	cmp	r1, #0
 80003ce:	d149      	bne.n	8000464 <__udivmoddi4+0x158>
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d302      	bcc.n	80003da <__udivmoddi4+0xce>
 80003d4:	4282      	cmp	r2, r0
 80003d6:	f200 80f8 	bhi.w	80005ca <__udivmoddi4+0x2be>
 80003da:	1a84      	subs	r4, r0, r2
 80003dc:	eb65 0203 	sbc.w	r2, r5, r3
 80003e0:	2001      	movs	r0, #1
 80003e2:	4617      	mov	r7, r2
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d0e2      	beq.n	80003ae <__udivmoddi4+0xa2>
 80003e8:	e9c6 4700 	strd	r4, r7, [r6]
 80003ec:	e7df      	b.n	80003ae <__udivmoddi4+0xa2>
 80003ee:	b902      	cbnz	r2, 80003f2 <__udivmoddi4+0xe6>
 80003f0:	deff      	udf	#255	; 0xff
 80003f2:	fab2 f382 	clz	r3, r2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	f040 8090 	bne.w	800051c <__udivmoddi4+0x210>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2101      	movs	r1, #1
 8000408:	fbb2 f5f7 	udiv	r5, r2, r7
 800040c:	fb07 2015 	mls	r0, r7, r5, r2
 8000410:	0c22      	lsrs	r2, r4, #16
 8000412:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000416:	fb0e f005 	mul.w	r0, lr, r5
 800041a:	4290      	cmp	r0, r2
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x124>
 800041e:	eb1c 0202 	adds.w	r2, ip, r2
 8000422:	f105 38ff 	add.w	r8, r5, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x122>
 8000428:	4290      	cmp	r0, r2
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2b8>
 800042e:	4645      	mov	r5, r8
 8000430:	1a12      	subs	r2, r2, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb2 f0f7 	udiv	r0, r2, r7
 8000438:	fb07 2210 	mls	r2, r7, r0, r2
 800043c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x14e>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x14c>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2c2>
 8000458:	4610      	mov	r0, r2
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000462:	e79f      	b.n	80003a4 <__udivmoddi4+0x98>
 8000464:	f1c1 0720 	rsb	r7, r1, #32
 8000468:	408b      	lsls	r3, r1
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa05 f401 	lsl.w	r4, r5, r1
 8000476:	fa20 f307 	lsr.w	r3, r0, r7
 800047a:	40fd      	lsrs	r5, r7
 800047c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000480:	4323      	orrs	r3, r4
 8000482:	fbb5 f8f9 	udiv	r8, r5, r9
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	fb09 5518 	mls	r5, r9, r8, r5
 800048e:	0c1c      	lsrs	r4, r3, #16
 8000490:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000494:	fb08 f50e 	mul.w	r5, r8, lr
 8000498:	42a5      	cmp	r5, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	fa00 f001 	lsl.w	r0, r0, r1
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b0>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2b4>
 80004b0:	42a5      	cmp	r5, r4
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2b4>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4464      	add	r4, ip
 80004bc:	1b64      	subs	r4, r4, r5
 80004be:	b29d      	uxth	r5, r3
 80004c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c4:	fb09 4413 	mls	r4, r9, r3, r4
 80004c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d0:	45a6      	cmp	lr, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1da>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f103 35ff 	add.w	r5, r3, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2ac>
 80004de:	45a6      	cmp	lr, r4
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2ac>
 80004e2:	3b02      	subs	r3, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ea:	fba3 9502 	umull	r9, r5, r3, r2
 80004ee:	eba4 040e 	sub.w	r4, r4, lr
 80004f2:	42ac      	cmp	r4, r5
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46ae      	mov	lr, r5
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x29c>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x298>
 80004fc:	b156      	cbz	r6, 8000514 <__udivmoddi4+0x208>
 80004fe:	ebb0 0208 	subs.w	r2, r0, r8
 8000502:	eb64 040e 	sbc.w	r4, r4, lr
 8000506:	fa04 f707 	lsl.w	r7, r4, r7
 800050a:	40ca      	lsrs	r2, r1
 800050c:	40cc      	lsrs	r4, r1
 800050e:	4317      	orrs	r7, r2
 8000510:	e9c6 7400 	strd	r7, r4, [r6]
 8000514:	4618      	mov	r0, r3
 8000516:	2100      	movs	r1, #0
 8000518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051c:	f1c3 0120 	rsb	r1, r3, #32
 8000520:	fa02 fc03 	lsl.w	ip, r2, r3
 8000524:	fa20 f201 	lsr.w	r2, r0, r1
 8000528:	fa25 f101 	lsr.w	r1, r5, r1
 800052c:	409d      	lsls	r5, r3
 800052e:	432a      	orrs	r2, r5
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb1 f0f7 	udiv	r0, r1, r7
 800053c:	fb07 1510 	mls	r5, r7, r0, r1
 8000540:	0c11      	lsrs	r1, r2, #16
 8000542:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000546:	fb00 f50e 	mul.w	r5, r0, lr
 800054a:	428d      	cmp	r5, r1
 800054c:	fa04 f403 	lsl.w	r4, r4, r3
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x258>
 8000552:	eb1c 0101 	adds.w	r1, ip, r1
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b0>
 800055c:	428d      	cmp	r5, r1
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b0>
 8000560:	3802      	subs	r0, #2
 8000562:	4461      	add	r1, ip
 8000564:	1b49      	subs	r1, r1, r5
 8000566:	b292      	uxth	r2, r2
 8000568:	fbb1 f5f7 	udiv	r5, r1, r7
 800056c:	fb07 1115 	mls	r1, r7, r5, r1
 8000570:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000574:	fb05 f10e 	mul.w	r1, r5, lr
 8000578:	4291      	cmp	r1, r2
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x282>
 800057c:	eb1c 0202 	adds.w	r2, ip, r2
 8000580:	f105 38ff 	add.w	r8, r5, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2a8>
 8000586:	4291      	cmp	r1, r2
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2a8>
 800058a:	3d02      	subs	r5, #2
 800058c:	4462      	add	r2, ip
 800058e:	1a52      	subs	r2, r2, r1
 8000590:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0xfc>
 8000596:	4631      	mov	r1, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e708      	b.n	80003ae <__udivmoddi4+0xa2>
 800059c:	4639      	mov	r1, r7
 800059e:	e6e6      	b.n	800036e <__udivmoddi4+0x62>
 80005a0:	4610      	mov	r0, r2
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x90>
 80005a4:	4548      	cmp	r0, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f0>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b0:	3b01      	subs	r3, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f0>
 80005b4:	4645      	mov	r5, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x282>
 80005b8:	462b      	mov	r3, r5
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1da>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x258>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b0>
 80005c4:	3d02      	subs	r5, #2
 80005c6:	4462      	add	r2, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x124>
 80005ca:	4608      	mov	r0, r1
 80005cc:	e70a      	b.n	80003e4 <__udivmoddi4+0xd8>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x14e>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <mean>:

// 9) Realizar una función que reciba un vector de muestras no signadas de 16 bits e invierta su orden.
static void invertir (uint16_t* vector, uint32_t longitud);

static void mean(uint16_t* x, uint16_t* y, uint16_t* z, uint16_t N)
{
 80005d8:	b480      	push	{r7}
 80005da:	b087      	sub	sp, #28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	807b      	strh	r3, [r7, #2]
	for(uint16_t n = 0; n < N; n++) {
 80005e6:	2300      	movs	r3, #0
 80005e8:	82fb      	strh	r3, [r7, #22]
 80005ea:	e015      	b.n	8000618 <mean+0x40>
		z[n] = (x[n] + y[n]) >> 1;
 80005ec:	8afb      	ldrh	r3, [r7, #22]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	4619      	mov	r1, r3
 80005f8:	8afb      	ldrh	r3, [r7, #22]
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	4413      	add	r3, r2
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	440b      	add	r3, r1
 8000604:	1059      	asrs	r1, r3, #1
 8000606:	8afb      	ldrh	r3, [r7, #22]
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	b28a      	uxth	r2, r1
 8000610:	801a      	strh	r2, [r3, #0]
	for(uint16_t n = 0; n < N; n++) {
 8000612:	8afb      	ldrh	r3, [r7, #22]
 8000614:	3301      	adds	r3, #1
 8000616:	82fb      	strh	r3, [r7, #22]
 8000618:	8afa      	ldrh	r2, [r7, #22]
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	429a      	cmp	r2, r3
 800061e:	d3e5      	bcc.n	80005ec <mean+0x14>
	}
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	371c      	adds	r7, #28
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
	...

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b0da      	sub	sp, #360	; 0x168
 8000634:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fcb3 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f9c1 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 fa57 	bl	8000af0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000642:	f000 fa2b 	bl	8000a9c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Variables para contar ciclos.
  	volatile uint32_t cnt_c = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  	volatile uint32_t cnt_asm = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  	volatile uint32_t cnt_asm_simd = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c


      // Testeo pasaje de modo privilegiado a no privilegiado y viceversa
      // El pasaje de no privilegiado a privilegiado se hará a través de una excepcion SVC.
      svc_privileges();
 8000658:	f000 fab8 	bl	8000bcc <svc_privileges>

      // Línea para activar el conteo de ciclos (se debe ejecutar una sola vez)
      DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos;
 800065c:	4bc3      	ldr	r3, [pc, #780]	; (800096c <main+0x33c>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4ac2      	ldr	r2, [pc, #776]	; (800096c <main+0x33c>)
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	6013      	str	r3, [r2, #0]

      // ------------------ ZEROS ------------------ //
      uint32_t vec_c_zeros[5] = {0, 1, 2, 3, 4};
 8000668:	4bc1      	ldr	r3, [pc, #772]	; (8000970 <main+0x340>)
 800066a:	f507 74a4 	add.w	r4, r7, #328	; 0x148
 800066e:	461d      	mov	r5, r3
 8000670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000674:	682b      	ldr	r3, [r5, #0]
 8000676:	6023      	str	r3, [r4, #0]
      uint32_t vec_asm_zeros[5] = {0, 1, 2, 3, 4};
 8000678:	4bbd      	ldr	r3, [pc, #756]	; (8000970 <main+0x340>)
 800067a:	f507 749a 	add.w	r4, r7, #308	; 0x134
 800067e:	461d      	mov	r5, r3
 8000680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000684:	682b      	ldr	r3, [r5, #0]
 8000686:	6023      	str	r3, [r4, #0]

      DWT->CYCCNT = 0;
 8000688:	4bb8      	ldr	r3, [pc, #736]	; (800096c <main+0x33c>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
      zeros(vec_c_zeros, 5);
 800068e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8000692:	2105      	movs	r1, #5
 8000694:	4618      	mov	r0, r3
 8000696:	f000 faca 	bl	8000c2e <zeros>
      cnt_c = DWT->CYCCNT;
 800069a:	4bb4      	ldr	r3, [pc, #720]	; (800096c <main+0x33c>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

      DWT->CYCCNT = 0;
 80006a2:	4bb2      	ldr	r3, [pc, #712]	; (800096c <main+0x33c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	605a      	str	r2, [r3, #4]
      asm_zeros(vec_asm_zeros, 5);
 80006a8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80006ac:	2105      	movs	r1, #5
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fdac 	bl	800020c <asm_zeros>
      cnt_asm = DWT->CYCCNT;
 80006b4:	4bad      	ldr	r3, [pc, #692]	; (800096c <main+0x33c>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
      // ------------------------------------------- //


      // ---------- PRODUCTO ESCALAR (32) ---------- //
      uint32_t vec_c32[5] = {0, 1, 2, 3, 4};
 80006bc:	4bac      	ldr	r3, [pc, #688]	; (8000970 <main+0x340>)
 80006be:	f507 7490 	add.w	r4, r7, #288	; 0x120
 80006c2:	461d      	mov	r5, r3
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	682b      	ldr	r3, [r5, #0]
 80006ca:	6023      	str	r3, [r4, #0]
      uint32_t vec_asm32[5] = {0, 10000, 20000, 30, 40};
 80006cc:	4ba9      	ldr	r3, [pc, #676]	; (8000974 <main+0x344>)
 80006ce:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 80006d2:	461d      	mov	r5, r3
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d8:	682b      	ldr	r3, [r5, #0]
 80006da:	6023      	str	r3, [r4, #0]
      uint32_t vec_out32[5];

      DWT->CYCCNT = 0;
 80006dc:	4ba3      	ldr	r3, [pc, #652]	; (800096c <main+0x33c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
      producto_escalar32(vec_c32, vec_out32, 5, 3);
 80006e2:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80006e6:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80006ea:	2303      	movs	r3, #3
 80006ec:	2205      	movs	r2, #5
 80006ee:	f000 faba 	bl	8000c66 <producto_escalar32>
      cnt_c = DWT->CYCCNT;
 80006f2:	4b9e      	ldr	r3, [pc, #632]	; (800096c <main+0x33c>)
 80006f4:	685b      	ldr	r3, [r3, #4]
 80006f6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

      DWT->CYCCNT = 0;
 80006fa:	4b9c      	ldr	r3, [pc, #624]	; (800096c <main+0x33c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	605a      	str	r2, [r3, #4]
      asm_producto_escalar32(vec_asm32, vec_out32, 5, 3);
 8000700:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8000704:	f507 7086 	add.w	r0, r7, #268	; 0x10c
 8000708:	2303      	movs	r3, #3
 800070a:	2205      	movs	r2, #5
 800070c:	f7ff fd87 	bl	800021e <asm_producto_escalar32>
      cnt_asm = DWT->CYCCNT;
 8000710:	4b96      	ldr	r3, [pc, #600]	; (800096c <main+0x33c>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
      // ------------------------------------------- //


      // ---------- PRODUCTO ESCALAR (16) ---------- //
      uint16_t vec_c16[5] = {0, 1, 2, 3, 4};
 8000718:	4a97      	ldr	r2, [pc, #604]	; (8000978 <main+0x348>)
 800071a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800071e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000720:	c303      	stmia	r3!, {r0, r1}
 8000722:	801a      	strh	r2, [r3, #0]
      uint16_t vec_asm16[5] = {0, 1, 2, 3, 4};
 8000724:	4a94      	ldr	r2, [pc, #592]	; (8000978 <main+0x348>)
 8000726:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800072a:	ca07      	ldmia	r2, {r0, r1, r2}
 800072c:	c303      	stmia	r3!, {r0, r1}
 800072e:	801a      	strh	r2, [r3, #0]
      uint16_t vec_out16[5];

      DWT->CYCCNT = 0;
 8000730:	4b8e      	ldr	r3, [pc, #568]	; (800096c <main+0x33c>)
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
      producto_escalar16(vec_c16, vec_out16, 5, 3);
 8000736:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800073a:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 800073e:	2303      	movs	r3, #3
 8000740:	2205      	movs	r2, #5
 8000742:	f000 fab5 	bl	8000cb0 <producto_escalar16>
      cnt_c = DWT->CYCCNT;
 8000746:	4b89      	ldr	r3, [pc, #548]	; (800096c <main+0x33c>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

      DWT->CYCCNT = 0;
 800074e:	4b87      	ldr	r3, [pc, #540]	; (800096c <main+0x33c>)
 8000750:	2200      	movs	r2, #0
 8000752:	605a      	str	r2, [r3, #4]
      asm_producto_escalar16(vec_asm16, vec_out16, 5, 3);
 8000754:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000758:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 800075c:	2303      	movs	r3, #3
 800075e:	2205      	movs	r2, #5
 8000760:	f7ff fd68 	bl	8000234 <asm_producto_escalar16>
      cnt_asm = DWT->CYCCNT;
 8000764:	4b81      	ldr	r3, [pc, #516]	; (800096c <main+0x33c>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
      // ------------------------------------------- //


      // ---------- PRODUCTO ESCALAR (12) ---------- //
      uint16_t vec_c12[5] = {0, 1000, 2000, 3000, 4000};
 800076c:	4a83      	ldr	r2, [pc, #524]	; (800097c <main+0x34c>)
 800076e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000772:	ca07      	ldmia	r2, {r0, r1, r2}
 8000774:	c303      	stmia	r3!, {r0, r1}
 8000776:	801a      	strh	r2, [r3, #0]
      uint16_t vec_asm12[5] = {0, 1000, 2000, 3000, 4000};
 8000778:	4a80      	ldr	r2, [pc, #512]	; (800097c <main+0x34c>)
 800077a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800077e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000780:	c303      	stmia	r3!, {r0, r1}
 8000782:	801a      	strh	r2, [r3, #0]
      uint16_t vec_out12[5];

      DWT->CYCCNT = 0;
 8000784:	4b79      	ldr	r3, [pc, #484]	; (800096c <main+0x33c>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
      producto_escalar12(vec_c12, vec_out12, 5, 2);
 800078a:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800078e:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8000792:	2302      	movs	r3, #2
 8000794:	2205      	movs	r2, #5
 8000796:	f000 fab1 	bl	8000cfc <producto_escalar12>
      cnt_c = DWT->CYCCNT;
 800079a:	4b74      	ldr	r3, [pc, #464]	; (800096c <main+0x33c>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

      DWT->CYCCNT = 0;
 80007a2:	4b72      	ldr	r3, [pc, #456]	; (800096c <main+0x33c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
      asm_producto_escalar12(vec_asm12, vec_out12, 5, 2);
 80007a8:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80007ac:	f107 00bc 	add.w	r0, r7, #188	; 0xbc
 80007b0:	2302      	movs	r3, #2
 80007b2:	2205      	movs	r2, #5
 80007b4:	f7ff fd49 	bl	800024a <asm_producto_escalar12>
      cnt_asm = DWT->CYCCNT;
 80007b8:	4b6c      	ldr	r3, [pc, #432]	; (800096c <main+0x33c>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
      // ------------------------------------------- //


      // -------------- PACK 32 TO 16 -------------- //
      int32_t vec_pack_c[4] = {0xFAFA0000, 0x5A5A0000, 0xFEDE0000, 0x42FF0000};
 80007c0:	4b6f      	ldr	r3, [pc, #444]	; (8000980 <main+0x350>)
 80007c2:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80007c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      int32_t vec_pack_asm[4] = {0xFAFA0000, 0x5A5A0000, 0xFEDE0000, 0x42FF0000};
 80007cc:	4b6c      	ldr	r3, [pc, #432]	; (8000980 <main+0x350>)
 80007ce:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80007d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      int16_t vec_pack_out_c[4];
      int16_t vec_pack_out_asm[4];

      DWT->CYCCNT = 0;
 80007d8:	4b64      	ldr	r3, [pc, #400]	; (800096c <main+0x33c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
      pack32_to_16(vec_pack_c, vec_pack_out_c, 4);
 80007de:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80007e2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007e6:	2204      	movs	r2, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fab8 	bl	8000d5e <pack32_to_16>
      cnt_c = DWT->CYCCNT;
 80007ee:	4b5f      	ldr	r3, [pc, #380]	; (800096c <main+0x33c>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

      DWT->CYCCNT = 0;
 80007f6:	4b5d      	ldr	r3, [pc, #372]	; (800096c <main+0x33c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
      asm_pack32_to_16(vec_pack_asm, vec_pack_out_asm, 4);
 80007fc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000800:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000804:	2204      	movs	r2, #4
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fd2c 	bl	8000264 <asm_pack32_to_16>
      cnt_asm = DWT->CYCCNT;
 800080c:	4b57      	ldr	r3, [pc, #348]	; (800096c <main+0x33c>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
      // ------------------------------------------- //


      // ------------------- MAX ------------------- //
      int32_t vec_c_max[6] = {0, -54, 50, 3, 45, -4};
 8000814:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000818:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800081c:	4a59      	ldr	r2, [pc, #356]	; (8000984 <main+0x354>)
 800081e:	461c      	mov	r4, r3
 8000820:	4615      	mov	r5, r2
 8000822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000826:	e895 0003 	ldmia.w	r5, {r0, r1}
 800082a:	e884 0003 	stmia.w	r4, {r0, r1}
      int32_t vec_asm_max[6] = {0, -54, 50, 3, 45, -4};
 800082e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000832:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000836:	4a53      	ldr	r2, [pc, #332]	; (8000984 <main+0x354>)
 8000838:	461c      	mov	r4, r3
 800083a:	4615      	mov	r5, r2
 800083c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000840:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000844:	e884 0003 	stmia.w	r4, {r0, r1}
      volatile int32_t max_c;
      volatile int32_t max_asm;


      DWT->CYCCNT = 0;
 8000848:	4b48      	ldr	r3, [pc, #288]	; (800096c <main+0x33c>)
 800084a:	2200      	movs	r2, #0
 800084c:	605a      	str	r2, [r3, #4]
      max_c = max(vec_c_max, 6);
 800084e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000852:	2106      	movs	r1, #6
 8000854:	4618      	mov	r0, r3
 8000856:	f000 faa5 	bl	8000da4 <max>
 800085a:	4602      	mov	r2, r0
 800085c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000860:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8000864:	601a      	str	r2, [r3, #0]
      cnt_c = DWT->CYCCNT;
 8000866:	4b41      	ldr	r3, [pc, #260]	; (800096c <main+0x33c>)
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

      DWT->CYCCNT = 0;
 800086e:	4b3f      	ldr	r3, [pc, #252]	; (800096c <main+0x33c>)
 8000870:	2200      	movs	r2, #0
 8000872:	605a      	str	r2, [r3, #4]
      max_asm = asm_max(vec_asm_max, 6);
 8000874:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000878:	2106      	movs	r1, #6
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff fd00 	bl	8000280 <asm_max>
 8000880:	4602      	mov	r2, r0
 8000882:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000886:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800088a:	601a      	str	r2, [r3, #0]
      cnt_c = DWT->CYCCNT;
 800088c:	4b37      	ldr	r3, [pc, #220]	; (800096c <main+0x33c>)
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
      // ------------------------------------------- //


      // ----------------- PROMEDIO ---------------- //
      uint16_t x_c[4] = {10, 20, 30, 40};
 8000894:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000898:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800089c:	4a3a      	ldr	r2, [pc, #232]	; (8000988 <main+0x358>)
 800089e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a2:	e883 0003 	stmia.w	r3, {r0, r1}
      uint16_t y_c[4] = {20, 30, 40, 50};
 80008a6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80008aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80008ae:	4a37      	ldr	r2, [pc, #220]	; (800098c <main+0x35c>)
 80008b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008b4:	e883 0003 	stmia.w	r3, {r0, r1}
      uint16_t z_c[4] = {0};
 80008b8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80008bc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80008c0:	461a      	mov	r2, r3
 80008c2:	2300      	movs	r3, #0
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	6053      	str	r3, [r2, #4]


      uint16_t x_asm[4] = {10, 20, 30, 40};
 80008c8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80008cc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80008d0:	4a2d      	ldr	r2, [pc, #180]	; (8000988 <main+0x358>)
 80008d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008d6:	e883 0003 	stmia.w	r3, {r0, r1}
      uint16_t y_asm[4] = {20, 30, 40, 50};
 80008da:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80008de:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80008e2:	4a2a      	ldr	r2, [pc, #168]	; (800098c <main+0x35c>)
 80008e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008e8:	e883 0003 	stmia.w	r3, {r0, r1}
      uint16_t z_asm[4] = {0};
 80008ec:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80008f0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80008f4:	461a      	mov	r2, r3
 80008f6:	2300      	movs	r3, #0
 80008f8:	6013      	str	r3, [r2, #0]
 80008fa:	6053      	str	r3, [r2, #4]

      uint16_t x_asm_simd[4] = {10, 20, 30, 40};
 80008fc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000900:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8000904:	4a20      	ldr	r2, [pc, #128]	; (8000988 <main+0x358>)
 8000906:	e892 0003 	ldmia.w	r2, {r0, r1}
 800090a:	e883 0003 	stmia.w	r3, {r0, r1}
      uint16_t y_asm_simd[4] = {20, 30, 40, 50};
 800090e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000912:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8000916:	4a1d      	ldr	r2, [pc, #116]	; (800098c <main+0x35c>)
 8000918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800091c:	e883 0003 	stmia.w	r3, {r0, r1}
      uint16_t z_asm_simd[4] = {0};
 8000920:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000924:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8000928:	461a      	mov	r2, r3
 800092a:	2300      	movs	r3, #0
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	6053      	str	r3, [r2, #4]

      DWT->CYCCNT = 0;
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <main+0x33c>)
 8000932:	2200      	movs	r2, #0
 8000934:	605a      	str	r2, [r3, #4]
      mean(x_c, y_c, z_c, 4);
 8000936:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800093a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800093e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000942:	2304      	movs	r3, #4
 8000944:	f7ff fe48 	bl	80005d8 <mean>
      cnt_c = DWT->CYCCNT;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <main+0x33c>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

      DWT->CYCCNT = 0;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <main+0x33c>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
      asm_mean(x_asm, y_asm, z_asm, 4);
 8000956:	f107 0218 	add.w	r2, r7, #24
 800095a:	f107 0120 	add.w	r1, r7, #32
 800095e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000962:	2304      	movs	r3, #4
 8000964:	f7ff fc9a 	bl	800029c <asm_mean>
 8000968:	e012      	b.n	8000990 <main+0x360>
 800096a:	bf00      	nop
 800096c:	e0001000 	.word	0xe0001000
 8000970:	08002770 	.word	0x08002770
 8000974:	08002784 	.word	0x08002784
 8000978:	08002798 	.word	0x08002798
 800097c:	080027a4 	.word	0x080027a4
 8000980:	080027b0 	.word	0x080027b0
 8000984:	080027c0 	.word	0x080027c0
 8000988:	080027d8 	.word	0x080027d8
 800098c:	080027e0 	.word	0x080027e0
      cnt_asm = DWT->CYCCNT;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <main+0x38c>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

      DWT->CYCCNT = 0;
 8000998:	4b08      	ldr	r3, [pc, #32]	; (80009bc <main+0x38c>)
 800099a:	2200      	movs	r2, #0
 800099c:	605a      	str	r2, [r3, #4]
      asm_mean_simd(x_asm, y_asm, z_asm, 4);
 800099e:	f107 0218 	add.w	r2, r7, #24
 80009a2:	f107 0120 	add.w	r1, r7, #32
 80009a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80009aa:	2304      	movs	r3, #4
 80009ac:	f7ff fc85 	bl	80002ba <asm_mean_simd>
      cnt_asm = DWT->CYCCNT;
 80009b0:	4b02      	ldr	r3, [pc, #8]	; (80009bc <main+0x38c>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <main+0x388>
 80009ba:	bf00      	nop
 80009bc:	e0001000 	.word	0xe0001000

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2234      	movs	r2, #52	; 0x34
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f001 fe96 	bl	8002700 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 0308 	add.w	r3, r7, #8
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b2a      	ldr	r3, [pc, #168]	; (8000a94 <SystemClock_Config+0xd4>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a29      	ldr	r2, [pc, #164]	; (8000a94 <SystemClock_Config+0xd4>)
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <SystemClock_Config+0xd4>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a00:	2300      	movs	r3, #0
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <SystemClock_Config+0xd8>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a0c:	4a22      	ldr	r2, [pc, #136]	; (8000a98 <SystemClock_Config+0xd8>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <SystemClock_Config+0xd8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a30:	2300      	movs	r3, #0
 8000a32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a34:	2310      	movs	r3, #16
 8000a36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a38:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a3c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f001 f8f6 	bl	8001c40 <HAL_RCC_OscConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a5a:	f000 f9c6 	bl	8000dea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a62:	2302      	movs	r3, #2
 8000a64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a74:	f107 0308 	add.w	r3, r7, #8
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fd96 	bl	80015ac <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a86:	f000 f9b0 	bl	8000dea <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	; 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_USART2_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f001 fb52 	bl	800217c <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ade:	f000 f984 	bl	8000dea <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000028 	.word	0x20000028
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a2c      	ldr	r2, [pc, #176]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b26      	ldr	r3, [pc, #152]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a25      	ldr	r2, [pc, #148]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a1e      	ldr	r2, [pc, #120]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a17      	ldr	r2, [pc, #92]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <MX_GPIO_Init+0xd0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <MX_GPIO_Init+0xd4>)
 8000b7c:	f000 fcfc 	bl	8001578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <MX_GPIO_Init+0xd8>)
 8000b98:	f000 fb5a 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b9c:	2320      	movs	r3, #32
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_GPIO_Init+0xd4>)
 8000bb4:	f000 fb4c 	bl	8001250 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb8:	bf00      	nop
 8000bba:	3728      	adds	r7, #40	; 0x28
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020000 	.word	0x40020000
 8000bc8:	40020800 	.word	0x40020800

08000bcc <svc_privileges>:

/* USER CODE BEGIN 4 */
static void svc_privileges()
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000bd2:	f3ef 8314 	mrs	r3, CONTROL
 8000bd6:	607b      	str	r3, [r7, #4]
  return(result);
 8000bd8:	687b      	ldr	r3, [r7, #4]
    // Read CONTROL register for the fist time. Since we are in privileged mode, it should return 0.
    uint32_t control = __get_CONTROL();
 8000bda:	61fb      	str	r3, [r7, #28]

    // Set LSB to change the mode to non-privileged and update CONTROL.
    control |= 0x01;
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	f383 8814 	msr	CONTROL, r3
}
 8000bee:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000bf0:	f3ef 8314 	mrs	r3, CONTROL
 8000bf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    __set_CONTROL(control);

    // Check that we are in non-privileged mode
    control = __get_CONTROL();
 8000bf8:	61fb      	str	r3, [r7, #28]

    // Clear LSB again, and see what happens...
    control &= ~0x01;
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	f023 0301 	bic.w	r3, r3, #1
 8000c00:	61fb      	str	r3, [r7, #28]
 8000c02:	69fb      	ldr	r3, [r7, #28]
 8000c04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	f383 8814 	msr	CONTROL, r3
}
 8000c0c:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000c0e:	f3ef 8314 	mrs	r3, CONTROL
 8000c12:	617b      	str	r3, [r7, #20]
  return(result);
 8000c14:	697b      	ldr	r3, [r7, #20]
    __set_CONTROL(control);

    control = __get_CONTROL();
 8000c16:	61fb      	str	r3, [r7, #28]

    // nothing will happen, since we are trying to change the mode from non-privileged to privileged.
    // One way of addressing this is to go to Handler mode by triggering an exception, and perform the
    // change of mode in the ISR. Let's trigger the SVC (Supervisor Call, or System service call) exception.
    asm_svc();
 8000c18:	f7ff faf4 	bl	8000204 <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000c1c:	f3ef 8314 	mrs	r3, CONTROL
 8000c20:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c22:	69bb      	ldr	r3, [r7, #24]

    // The rest of the code will be at stm32f4xx_it.c -> SVC_Handler(void)
    control = __get_CONTROL();
 8000c24:	61fb      	str	r3, [r7, #28]
}
 8000c26:	bf00      	nop
 8000c28:	3720      	adds	r7, #32
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <zeros>:

static void zeros(uint32_t* vector, uint32_t longitud)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b085      	sub	sp, #20
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	6039      	str	r1, [r7, #0]
    for(uint32_t i = 0; i < longitud; i++) {
 8000c38:	2300      	movs	r3, #0
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	e008      	b.n	8000c50 <zeros+0x22>
        vector[i] = 0;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < longitud; i++) {
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fa      	ldr	r2, [r7, #12]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d3f2      	bcc.n	8000c3e <zeros+0x10>
    }
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <producto_escalar32>:

static void producto_escalar32(uint32_t* vector_in, uint32_t* vector_out, uint32_t longitud, uint32_t escalar)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b087      	sub	sp, #28
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	603b      	str	r3, [r7, #0]
    for(uint32_t i = 0; i < longitud; i++) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	e00f      	b.n	8000c9a <producto_escalar32+0x34>
        vector_out[i] = vector_in[i]*escalar;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	4413      	add	r3, r2
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	440b      	add	r3, r1
 8000c8c:	6839      	ldr	r1, [r7, #0]
 8000c8e:	fb01 f202 	mul.w	r2, r1, r2
 8000c92:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < longitud; i++) {
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	3301      	adds	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d3eb      	bcc.n	8000c7a <producto_escalar32+0x14>
    }
}
 8000ca2:	bf00      	nop
 8000ca4:	bf00      	nop
 8000ca6:	371c      	adds	r7, #28
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <producto_escalar16>:

static void producto_escalar16(uint16_t* vector_in, uint16_t* vector_out, uint32_t longitud, uint16_t escalar)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b087      	sub	sp, #28
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	807b      	strh	r3, [r7, #2]
    for(uint32_t i = 0; i < longitud; i++) {
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	e010      	b.n	8000ce6 <producto_escalar16+0x36>
        vector_out[i] = vector_in[i]*escalar;
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	4413      	add	r3, r2
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	68b9      	ldr	r1, [r7, #8]
 8000cd4:	440b      	add	r3, r1
 8000cd6:	8879      	ldrh	r1, [r7, #2]
 8000cd8:	fb11 f202 	smulbb	r2, r1, r2
 8000cdc:	b292      	uxth	r2, r2
 8000cde:	801a      	strh	r2, [r3, #0]
    for(uint32_t i = 0; i < longitud; i++) {
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	617b      	str	r3, [r7, #20]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d3ea      	bcc.n	8000cc4 <producto_escalar16+0x14>
    }
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	371c      	adds	r7, #28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <producto_escalar12>:


static void producto_escalar12(uint16_t* vector_in, uint16_t* vector_out, uint32_t longitud, uint16_t escalar)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b087      	sub	sp, #28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	807b      	strh	r3, [r7, #2]
    for(uint32_t i = 0; i < longitud; i++) {
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	e01b      	b.n	8000d48 <producto_escalar12+0x4c>
        uint32_t res = (uint32_t)vector_in[i] * (uint32_t)escalar;
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	887b      	ldrh	r3, [r7, #2]
 8000d1e:	fb02 f303 	mul.w	r3, r2, r3
 8000d22:	613b      	str	r3, [r7, #16]
        vector_out[i] = (res > 4095) ? 4095 : (uint16_t)res;
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d2a:	d202      	bcs.n	8000d32 <producto_escalar12+0x36>
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	b299      	uxth	r1, r3
 8000d30:	e001      	b.n	8000d36 <producto_escalar12+0x3a>
 8000d32:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	460a      	mov	r2, r1
 8000d40:	801a      	strh	r2, [r3, #0]
    for(uint32_t i = 0; i < longitud; i++) {
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3df      	bcc.n	8000d10 <producto_escalar12+0x14>
    }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	371c      	adds	r7, #28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <pack32_to_16>:
{

}

static void pack32_to_16(int32_t* vector_in, int16_t* vector_out, uint32_t longitud)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b087      	sub	sp, #28
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
	for(uint32_t i = 0; i < longitud; i++) {
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e00e      	b.n	8000d8e <pack32_to_16+0x30>
		vector_out[i] = (int16_t)(vector_in[i] >> 16);
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	68fa      	ldr	r2, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	1419      	asrs	r1, r3, #16
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	68ba      	ldr	r2, [r7, #8]
 8000d82:	4413      	add	r3, r2
 8000d84:	b20a      	sxth	r2, r1
 8000d86:	801a      	strh	r2, [r3, #0]
	for(uint32_t i = 0; i < longitud; i++) {
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d3ec      	bcc.n	8000d70 <pack32_to_16+0x12>
	}
}
 8000d96:	bf00      	nop
 8000d98:	bf00      	nop
 8000d9a:	371c      	adds	r7, #28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <max>:

static int32_t max(int32_t* vector_in, uint32_t longitud)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
    int32_t max = vector_in[0];
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 1; i <  longitud; i++) {
 8000db4:	2301      	movs	r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	e00c      	b.n	8000dd4 <max+0x30>
        max = (vector_in[i] > max) ? vector_in[i] : max;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	bfb8      	it	lt
 8000dca:	4613      	movlt	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 1; i <  longitud; i++) {
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d3ee      	bcc.n	8000dba <max+0x16>
    }

    return max;
 8000ddc:	68fb      	ldr	r3, [r7, #12]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dee:	b672      	cpsid	i
}
 8000df0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df2:	e7fe      	b.n	8000df2 <Error_Handler+0x8>

08000df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x4c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e32:	2007      	movs	r0, #7
 8000e34:	f000 f9d8 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40023800 	.word	0x40023800

08000e44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a19      	ldr	r2, [pc, #100]	; (8000ec8 <HAL_UART_MspInit+0x84>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d12b      	bne.n	8000ebe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	613b      	str	r3, [r7, #16]
 8000e80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_UART_MspInit+0x88>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eae:	2307      	movs	r3, #7
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_UART_MspInit+0x8c>)
 8000eba:	f000 f9c9 	bl	8001250 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3728      	adds	r7, #40	; 0x28
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40004400 	.word	0x40004400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020000 	.word	0x40020000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 f890 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f50:	480d      	ldr	r0, [pc, #52]	; (8000f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f52:	490e      	ldr	r1, [pc, #56]	; (8000f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f54:	4a0e      	ldr	r2, [pc, #56]	; (8000f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f58:	e002      	b.n	8000f60 <LoopCopyDataInit>

08000f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5e:	3304      	adds	r3, #4

08000f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f64:	d3f9      	bcc.n	8000f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f66:	4a0b      	ldr	r2, [pc, #44]	; (8000f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f68:	4c0b      	ldr	r4, [pc, #44]	; (8000f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f6c:	e001      	b.n	8000f72 <LoopFillZerobss>

08000f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f70:	3204      	adds	r2, #4

08000f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f74:	d3fb      	bcc.n	8000f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f76:	f7ff ffd7 	bl	8000f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f001 fbc9 	bl	8002710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fb57 	bl	8000630 <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f90:	08002810 	.word	0x08002810
  ldr r2, =_sbss
 8000f94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f98:	20000070 	.word	0x20000070

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	; (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f90d 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff ff0e 	bl	8000df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f917 	bl	8001236 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f8ed 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	2000006c 	.word	0x2000006c

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000006c 	.word	0x2000006c

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	; (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff47 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff5c 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffb0 	bl	80011a4 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	; 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800125e:	2300      	movs	r3, #0
 8001260:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	e165      	b.n	8001538 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	429a      	cmp	r2, r3
 8001286:	f040 8154 	bne.w	8001532 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b01      	cmp	r3, #1
 8001294:	d005      	beq.n	80012a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d130      	bne.n	8001304 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	2203      	movs	r2, #3
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d8:	2201      	movs	r2, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	091b      	lsrs	r3, r3, #4
 80012ee:	f003 0201 	and.w	r2, r3, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b03      	cmp	r3, #3
 800130e:	d017      	beq.n	8001340 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	2203      	movs	r2, #3
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d123      	bne.n	8001394 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	08da      	lsrs	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3208      	adds	r2, #8
 8001354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	220f      	movs	r2, #15
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	08da      	lsrs	r2, r3, #3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3208      	adds	r2, #8
 800138e:	69b9      	ldr	r1, [r7, #24]
 8001390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0203 	and.w	r2, r3, #3
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	f000 80ae 	beq.w	8001532 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <HAL_GPIO_Init+0x300>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	4a5c      	ldr	r2, [pc, #368]	; (8001550 <HAL_GPIO_Init+0x300>)
 80013e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e4:	6453      	str	r3, [r2, #68]	; 0x44
 80013e6:	4b5a      	ldr	r3, [pc, #360]	; (8001550 <HAL_GPIO_Init+0x300>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013f2:	4a58      	ldr	r2, [pc, #352]	; (8001554 <HAL_GPIO_Init+0x304>)
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3302      	adds	r3, #2
 80013fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f003 0303 	and.w	r3, r3, #3
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	220f      	movs	r2, #15
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4f      	ldr	r2, [pc, #316]	; (8001558 <HAL_GPIO_Init+0x308>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d025      	beq.n	800146a <HAL_GPIO_Init+0x21a>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4e      	ldr	r2, [pc, #312]	; (800155c <HAL_GPIO_Init+0x30c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d01f      	beq.n	8001466 <HAL_GPIO_Init+0x216>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4d      	ldr	r2, [pc, #308]	; (8001560 <HAL_GPIO_Init+0x310>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x212>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4c      	ldr	r2, [pc, #304]	; (8001564 <HAL_GPIO_Init+0x314>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x20e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <HAL_GPIO_Init+0x318>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x20a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4a      	ldr	r2, [pc, #296]	; (800156c <HAL_GPIO_Init+0x31c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x206>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a49      	ldr	r2, [pc, #292]	; (8001570 <HAL_GPIO_Init+0x320>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x202>
 800144e:	2306      	movs	r3, #6
 8001450:	e00c      	b.n	800146c <HAL_GPIO_Init+0x21c>
 8001452:	2307      	movs	r3, #7
 8001454:	e00a      	b.n	800146c <HAL_GPIO_Init+0x21c>
 8001456:	2305      	movs	r3, #5
 8001458:	e008      	b.n	800146c <HAL_GPIO_Init+0x21c>
 800145a:	2304      	movs	r3, #4
 800145c:	e006      	b.n	800146c <HAL_GPIO_Init+0x21c>
 800145e:	2303      	movs	r3, #3
 8001460:	e004      	b.n	800146c <HAL_GPIO_Init+0x21c>
 8001462:	2302      	movs	r3, #2
 8001464:	e002      	b.n	800146c <HAL_GPIO_Init+0x21c>
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_GPIO_Init+0x21c>
 800146a:	2300      	movs	r3, #0
 800146c:	69fa      	ldr	r2, [r7, #28]
 800146e:	f002 0203 	and.w	r2, r2, #3
 8001472:	0092      	lsls	r2, r2, #2
 8001474:	4093      	lsls	r3, r2
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800147c:	4935      	ldr	r1, [pc, #212]	; (8001554 <HAL_GPIO_Init+0x304>)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	089b      	lsrs	r3, r3, #2
 8001482:	3302      	adds	r3, #2
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148a:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <HAL_GPIO_Init+0x324>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014ae:	4a31      	ldr	r2, [pc, #196]	; (8001574 <HAL_GPIO_Init+0x324>)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <HAL_GPIO_Init+0x324>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	43db      	mvns	r3, r3
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d8:	4a26      	ldr	r2, [pc, #152]	; (8001574 <HAL_GPIO_Init+0x324>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014de:	4b25      	ldr	r3, [pc, #148]	; (8001574 <HAL_GPIO_Init+0x324>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4013      	ands	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001502:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <HAL_GPIO_Init+0x324>)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001508:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <HAL_GPIO_Init+0x324>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <HAL_GPIO_Init+0x324>)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3301      	adds	r3, #1
 8001536:	61fb      	str	r3, [r7, #28]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	2b0f      	cmp	r3, #15
 800153c:	f67f ae96 	bls.w	800126c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001540:	bf00      	nop
 8001542:	bf00      	nop
 8001544:	3724      	adds	r7, #36	; 0x24
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800
 8001554:	40013800 	.word	0x40013800
 8001558:	40020000 	.word	0x40020000
 800155c:	40020400 	.word	0x40020400
 8001560:	40020800 	.word	0x40020800
 8001564:	40020c00 	.word	0x40020c00
 8001568:	40021000 	.word	0x40021000
 800156c:	40021400 	.word	0x40021400
 8001570:	40021800 	.word	0x40021800
 8001574:	40013c00 	.word	0x40013c00

08001578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
 8001584:	4613      	mov	r3, r2
 8001586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001588:	787b      	ldrb	r3, [r7, #1]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800158e:	887a      	ldrh	r2, [r7, #2]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001594:	e003      	b.n	800159e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001596:	887b      	ldrh	r3, [r7, #2]
 8001598:	041a      	lsls	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	619a      	str	r2, [r3, #24]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d101      	bne.n	80015c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e0cc      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015c0:	4b68      	ldr	r3, [pc, #416]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 030f 	and.w	r3, r3, #15
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d90c      	bls.n	80015e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ce:	4b65      	ldr	r3, [pc, #404]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d6:	4b63      	ldr	r3, [pc, #396]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d001      	beq.n	80015e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e0b8      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001600:	4b59      	ldr	r3, [pc, #356]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	4a58      	ldr	r2, [pc, #352]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001606:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800160a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0308 	and.w	r3, r3, #8
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001618:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	4a52      	ldr	r2, [pc, #328]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001622:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001624:	4b50      	ldr	r3, [pc, #320]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	494d      	ldr	r1, [pc, #308]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001632:	4313      	orrs	r3, r2
 8001634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d044      	beq.n	80016cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d107      	bne.n	800165a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d119      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e07f      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d003      	beq.n	800166a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001666:	2b03      	cmp	r3, #3
 8001668:	d107      	bne.n	800167a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166a:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d109      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e06f      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167a:	4b3b      	ldr	r3, [pc, #236]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d101      	bne.n	800168a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e067      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f023 0203 	bic.w	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	4934      	ldr	r1, [pc, #208]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001698:	4313      	orrs	r3, r2
 800169a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800169c:	f7ff fce6 	bl	800106c <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016a2:	e00a      	b.n	80016ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a4:	f7ff fce2 	bl	800106c <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e04f      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ba:	4b2b      	ldr	r3, [pc, #172]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 020c 	and.w	r2, r3, #12
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d1eb      	bne.n	80016a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016cc:	4b25      	ldr	r3, [pc, #148]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d20c      	bcs.n	80016f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016da:	4b22      	ldr	r3, [pc, #136]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016e2:	4b20      	ldr	r3, [pc, #128]	; (8001764 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d001      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e032      	b.n	800175a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d008      	beq.n	8001712 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001700:	4b19      	ldr	r3, [pc, #100]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	4916      	ldr	r1, [pc, #88]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	4313      	orrs	r3, r2
 8001710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d009      	beq.n	8001732 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	00db      	lsls	r3, r3, #3
 800172c:	490e      	ldr	r1, [pc, #56]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	4313      	orrs	r3, r2
 8001730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001732:	f000 f855 	bl	80017e0 <HAL_RCC_GetSysClockFreq>
 8001736:	4602      	mov	r2, r0
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	091b      	lsrs	r3, r3, #4
 800173e:	f003 030f 	and.w	r3, r3, #15
 8001742:	490a      	ldr	r1, [pc, #40]	; (800176c <HAL_RCC_ClockConfig+0x1c0>)
 8001744:	5ccb      	ldrb	r3, [r1, r3]
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_RCC_ClockConfig+0x1c8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fc46 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023c00 	.word	0x40023c00
 8001768:	40023800 	.word	0x40023800
 800176c:	080027e8 	.word	0x080027e8
 8001770:	20000000 	.word	0x20000000
 8001774:	20000004 	.word	0x20000004

08001778 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_RCC_GetHCLKFreq+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000000 	.word	0x20000000

08001790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001794:	f7ff fff0 	bl	8001778 <HAL_RCC_GetHCLKFreq>
 8001798:	4602      	mov	r2, r0
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	0a9b      	lsrs	r3, r3, #10
 80017a0:	f003 0307 	and.w	r3, r3, #7
 80017a4:	4903      	ldr	r1, [pc, #12]	; (80017b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017a6:	5ccb      	ldrb	r3, [r1, r3]
 80017a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40023800 	.word	0x40023800
 80017b4:	080027f8 	.word	0x080027f8

080017b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017bc:	f7ff ffdc 	bl	8001778 <HAL_RCC_GetHCLKFreq>
 80017c0:	4602      	mov	r2, r0
 80017c2:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	0b5b      	lsrs	r3, r3, #13
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	4903      	ldr	r1, [pc, #12]	; (80017dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80017ce:	5ccb      	ldrb	r3, [r1, r3]
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	080027f8 	.word	0x080027f8

080017e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e4:	b0ae      	sub	sp, #184	; 0xb8
 80017e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001806:	4bcb      	ldr	r3, [pc, #812]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b0c      	cmp	r3, #12
 8001810:	f200 8206 	bhi.w	8001c20 <HAL_RCC_GetSysClockFreq+0x440>
 8001814:	a201      	add	r2, pc, #4	; (adr r2, 800181c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181a:	bf00      	nop
 800181c:	08001851 	.word	0x08001851
 8001820:	08001c21 	.word	0x08001c21
 8001824:	08001c21 	.word	0x08001c21
 8001828:	08001c21 	.word	0x08001c21
 800182c:	08001859 	.word	0x08001859
 8001830:	08001c21 	.word	0x08001c21
 8001834:	08001c21 	.word	0x08001c21
 8001838:	08001c21 	.word	0x08001c21
 800183c:	08001861 	.word	0x08001861
 8001840:	08001c21 	.word	0x08001c21
 8001844:	08001c21 	.word	0x08001c21
 8001848:	08001c21 	.word	0x08001c21
 800184c:	08001a51 	.word	0x08001a51
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001850:	4bb9      	ldr	r3, [pc, #740]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x358>)
 8001852:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001856:	e1e7      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001858:	4bb8      	ldr	r3, [pc, #736]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x35c>)
 800185a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800185e:	e1e3      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001860:	4bb4      	ldr	r3, [pc, #720]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001868:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800186c:	4bb1      	ldr	r3, [pc, #708]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x354>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d071      	beq.n	800195c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001878:	4bae      	ldr	r3, [pc, #696]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x354>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	099b      	lsrs	r3, r3, #6
 800187e:	2200      	movs	r2, #0
 8001880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001884:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800188c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001890:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001894:	2300      	movs	r3, #0
 8001896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800189a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800189e:	4622      	mov	r2, r4
 80018a0:	462b      	mov	r3, r5
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	0159      	lsls	r1, r3, #5
 80018ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018b0:	0150      	lsls	r0, r2, #5
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4621      	mov	r1, r4
 80018b8:	1a51      	subs	r1, r2, r1
 80018ba:	6439      	str	r1, [r7, #64]	; 0x40
 80018bc:	4629      	mov	r1, r5
 80018be:	eb63 0301 	sbc.w	r3, r3, r1
 80018c2:	647b      	str	r3, [r7, #68]	; 0x44
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80018d0:	4649      	mov	r1, r9
 80018d2:	018b      	lsls	r3, r1, #6
 80018d4:	4641      	mov	r1, r8
 80018d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018da:	4641      	mov	r1, r8
 80018dc:	018a      	lsls	r2, r1, #6
 80018de:	4641      	mov	r1, r8
 80018e0:	1a51      	subs	r1, r2, r1
 80018e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80018e4:	4649      	mov	r1, r9
 80018e6:	eb63 0301 	sbc.w	r3, r3, r1
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80018f8:	4649      	mov	r1, r9
 80018fa:	00cb      	lsls	r3, r1, #3
 80018fc:	4641      	mov	r1, r8
 80018fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001902:	4641      	mov	r1, r8
 8001904:	00ca      	lsls	r2, r1, #3
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	4603      	mov	r3, r0
 800190c:	4622      	mov	r2, r4
 800190e:	189b      	adds	r3, r3, r2
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
 8001912:	462b      	mov	r3, r5
 8001914:	460a      	mov	r2, r1
 8001916:	eb42 0303 	adc.w	r3, r2, r3
 800191a:	637b      	str	r3, [r7, #52]	; 0x34
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001928:	4629      	mov	r1, r5
 800192a:	024b      	lsls	r3, r1, #9
 800192c:	4621      	mov	r1, r4
 800192e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001932:	4621      	mov	r1, r4
 8001934:	024a      	lsls	r2, r1, #9
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800193e:	2200      	movs	r2, #0
 8001940:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001944:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001948:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800194c:	f7fe fcc6 	bl	80002dc <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4613      	mov	r3, r2
 8001956:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800195a:	e067      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195c:	4b75      	ldr	r3, [pc, #468]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x354>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	2200      	movs	r2, #0
 8001964:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001968:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800196c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001974:	67bb      	str	r3, [r7, #120]	; 0x78
 8001976:	2300      	movs	r3, #0
 8001978:	67fb      	str	r3, [r7, #124]	; 0x7c
 800197a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800197e:	4622      	mov	r2, r4
 8001980:	462b      	mov	r3, r5
 8001982:	f04f 0000 	mov.w	r0, #0
 8001986:	f04f 0100 	mov.w	r1, #0
 800198a:	0159      	lsls	r1, r3, #5
 800198c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001990:	0150      	lsls	r0, r2, #5
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4621      	mov	r1, r4
 8001998:	1a51      	subs	r1, r2, r1
 800199a:	62b9      	str	r1, [r7, #40]	; 0x28
 800199c:	4629      	mov	r1, r5
 800199e:	eb63 0301 	sbc.w	r3, r3, r1
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80019b0:	4649      	mov	r1, r9
 80019b2:	018b      	lsls	r3, r1, #6
 80019b4:	4641      	mov	r1, r8
 80019b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ba:	4641      	mov	r1, r8
 80019bc:	018a      	lsls	r2, r1, #6
 80019be:	4641      	mov	r1, r8
 80019c0:	ebb2 0a01 	subs.w	sl, r2, r1
 80019c4:	4649      	mov	r1, r9
 80019c6:	eb63 0b01 	sbc.w	fp, r3, r1
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80019d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80019da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019de:	4692      	mov	sl, r2
 80019e0:	469b      	mov	fp, r3
 80019e2:	4623      	mov	r3, r4
 80019e4:	eb1a 0303 	adds.w	r3, sl, r3
 80019e8:	623b      	str	r3, [r7, #32]
 80019ea:	462b      	mov	r3, r5
 80019ec:	eb4b 0303 	adc.w	r3, fp, r3
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80019fe:	4629      	mov	r1, r5
 8001a00:	028b      	lsls	r3, r1, #10
 8001a02:	4621      	mov	r1, r4
 8001a04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a08:	4621      	mov	r1, r4
 8001a0a:	028a      	lsls	r2, r1, #10
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001a14:	2200      	movs	r2, #0
 8001a16:	673b      	str	r3, [r7, #112]	; 0x70
 8001a18:	677a      	str	r2, [r7, #116]	; 0x74
 8001a1a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001a1e:	f7fe fc5d 	bl	80002dc <__aeabi_uldivmod>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4613      	mov	r3, r2
 8001a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a2c:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	0c1b      	lsrs	r3, r3, #16
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	3301      	adds	r3, #1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001a3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001a42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001a4e:	e0eb      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a50:	4b38      	ldr	r3, [pc, #224]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a5c:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d06b      	beq.n	8001b40 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a68:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	099b      	lsrs	r3, r3, #6
 8001a6e:	2200      	movs	r2, #0
 8001a70:	66bb      	str	r3, [r7, #104]	; 0x68
 8001a72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001a74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a7a:	663b      	str	r3, [r7, #96]	; 0x60
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	667b      	str	r3, [r7, #100]	; 0x64
 8001a80:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a84:	4622      	mov	r2, r4
 8001a86:	462b      	mov	r3, r5
 8001a88:	f04f 0000 	mov.w	r0, #0
 8001a8c:	f04f 0100 	mov.w	r1, #0
 8001a90:	0159      	lsls	r1, r3, #5
 8001a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a96:	0150      	lsls	r0, r2, #5
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	1a51      	subs	r1, r2, r1
 8001aa0:	61b9      	str	r1, [r7, #24]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	f04f 0300 	mov.w	r3, #0
 8001ab2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001ab6:	4659      	mov	r1, fp
 8001ab8:	018b      	lsls	r3, r1, #6
 8001aba:	4651      	mov	r1, sl
 8001abc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ac0:	4651      	mov	r1, sl
 8001ac2:	018a      	lsls	r2, r1, #6
 8001ac4:	4651      	mov	r1, sl
 8001ac6:	ebb2 0801 	subs.w	r8, r2, r1
 8001aca:	4659      	mov	r1, fp
 8001acc:	eb63 0901 	sbc.w	r9, r3, r1
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001adc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ae0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ae4:	4690      	mov	r8, r2
 8001ae6:	4699      	mov	r9, r3
 8001ae8:	4623      	mov	r3, r4
 8001aea:	eb18 0303 	adds.w	r3, r8, r3
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	462b      	mov	r3, r5
 8001af2:	eb49 0303 	adc.w	r3, r9, r3
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 0300 	mov.w	r3, #0
 8001b00:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001b04:	4629      	mov	r1, r5
 8001b06:	024b      	lsls	r3, r1, #9
 8001b08:	4621      	mov	r1, r4
 8001b0a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b0e:	4621      	mov	r1, r4
 8001b10:	024a      	lsls	r2, r1, #9
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8001b1e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001b20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b24:	f7fe fbda 	bl	80002dc <__aeabi_uldivmod>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b32:	e065      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x420>
 8001b34:	40023800 	.word	0x40023800
 8001b38:	00f42400 	.word	0x00f42400
 8001b3c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b40:	4b3d      	ldr	r3, [pc, #244]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	2200      	movs	r2, #0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b50:	653b      	str	r3, [r7, #80]	; 0x50
 8001b52:	2300      	movs	r3, #0
 8001b54:	657b      	str	r3, [r7, #84]	; 0x54
 8001b56:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001b5a:	4642      	mov	r2, r8
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	f04f 0000 	mov.w	r0, #0
 8001b62:	f04f 0100 	mov.w	r1, #0
 8001b66:	0159      	lsls	r1, r3, #5
 8001b68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6c:	0150      	lsls	r0, r2, #5
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4641      	mov	r1, r8
 8001b74:	1a51      	subs	r1, r2, r1
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	4649      	mov	r1, r9
 8001b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b8c:	4659      	mov	r1, fp
 8001b8e:	018b      	lsls	r3, r1, #6
 8001b90:	4651      	mov	r1, sl
 8001b92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b96:	4651      	mov	r1, sl
 8001b98:	018a      	lsls	r2, r1, #6
 8001b9a:	4651      	mov	r1, sl
 8001b9c:	1a54      	subs	r4, r2, r1
 8001b9e:	4659      	mov	r1, fp
 8001ba0:	eb63 0501 	sbc.w	r5, r3, r1
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	00eb      	lsls	r3, r5, #3
 8001bae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bb2:	00e2      	lsls	r2, r4, #3
 8001bb4:	4614      	mov	r4, r2
 8001bb6:	461d      	mov	r5, r3
 8001bb8:	4643      	mov	r3, r8
 8001bba:	18e3      	adds	r3, r4, r3
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	464b      	mov	r3, r9
 8001bc0:	eb45 0303 	adc.w	r3, r5, r3
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	028b      	lsls	r3, r1, #10
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bdc:	4621      	mov	r1, r4
 8001bde:	028a      	lsls	r2, r1, #10
 8001be0:	4610      	mov	r0, r2
 8001be2:	4619      	mov	r1, r3
 8001be4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001be8:	2200      	movs	r2, #0
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001bec:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001bee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001bf2:	f7fe fb73 	bl	80002dc <__aeabi_uldivmod>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	0f1b      	lsrs	r3, r3, #28
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001c0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001c12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c1e:	e003      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001c26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	37b8      	adds	r7, #184	; 0xb8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	00f42400 	.word	0x00f42400

08001c40 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e28d      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8083 	beq.w	8001d66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c60:	4b94      	ldr	r3, [pc, #592]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d019      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c6c:	4b91      	ldr	r3, [pc, #580]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d106      	bne.n	8001c86 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c78:	4b8e      	ldr	r3, [pc, #568]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c84:	d00c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c86:	4b8b      	ldr	r3, [pc, #556]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d112      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c92:	4b88      	ldr	r3, [pc, #544]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	4b84      	ldr	r3, [pc, #528]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d05b      	beq.n	8001d64 <HAL_RCC_OscConfig+0x124>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d157      	bne.n	8001d64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e25a      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc0:	d106      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x90>
 8001cc2:	4b7c      	ldr	r3, [pc, #496]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a7b      	ldr	r2, [pc, #492]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e01d      	b.n	8001d0c <HAL_RCC_OscConfig+0xcc>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xb4>
 8001cda:	4b76      	ldr	r3, [pc, #472]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a75      	ldr	r2, [pc, #468]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b73      	ldr	r3, [pc, #460]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a72      	ldr	r2, [pc, #456]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0xcc>
 8001cf4:	4b6f      	ldr	r3, [pc, #444]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a6e      	ldr	r2, [pc, #440]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b6c      	ldr	r3, [pc, #432]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a6b      	ldr	r2, [pc, #428]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff f9aa 	bl	800106c <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f9a6 	bl	800106c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e21f      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b61      	ldr	r3, [pc, #388]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0xdc>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f996 	bl	800106c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff f992 	bl	800106c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e20b      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	4b57      	ldr	r3, [pc, #348]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x104>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d06f      	beq.n	8001e52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d72:	4b50      	ldr	r3, [pc, #320]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d017      	beq.n	8001dae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d7e:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d105      	bne.n	8001d96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d8a:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d00b      	beq.n	8001dae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d96:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d11c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001da2:	4b44      	ldr	r3, [pc, #272]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d116      	bne.n	8001ddc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dae:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d005      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x186>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e1d3      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc6:	4b3b      	ldr	r3, [pc, #236]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4937      	ldr	r1, [pc, #220]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dda:	e03a      	b.n	8001e52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d020      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001de4:	4b34      	ldr	r3, [pc, #208]	; (8001eb8 <HAL_RCC_OscConfig+0x278>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff f93f 	bl	800106c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df2:	f7ff f93b 	bl	800106c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e1b4      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	4b2b      	ldr	r3, [pc, #172]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4925      	ldr	r1, [pc, #148]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	600b      	str	r3, [r1, #0]
 8001e24:	e015      	b.n	8001e52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_OscConfig+0x278>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f91e 	bl	800106c <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e34:	f7ff f91a 	bl	800106c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e193      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0308 	and.w	r3, r3, #8
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d036      	beq.n	8001ecc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d016      	beq.n	8001e94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f8fe 	bl	800106c <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e74:	f7ff f8fa 	bl	800106c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e173      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_RCC_OscConfig+0x274>)
 8001e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0f0      	beq.n	8001e74 <HAL_RCC_OscConfig+0x234>
 8001e92:	e01b      	b.n	8001ecc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_OscConfig+0x27c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7ff f8e7 	bl	800106c <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea0:	e00e      	b.n	8001ec0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ea2:	f7ff f8e3 	bl	800106c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d907      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e15c      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	42470000 	.word	0x42470000
 8001ebc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	4b8a      	ldr	r3, [pc, #552]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ea      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 8097 	beq.w	8002008 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ede:	4b83      	ldr	r3, [pc, #524]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10f      	bne.n	8001f0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b7f      	ldr	r3, [pc, #508]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a7e      	ldr	r2, [pc, #504]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b7c      	ldr	r3, [pc, #496]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f06:	2301      	movs	r3, #1
 8001f08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0a:	4b79      	ldr	r3, [pc, #484]	; (80020f0 <HAL_RCC_OscConfig+0x4b0>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d118      	bne.n	8001f48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f16:	4b76      	ldr	r3, [pc, #472]	; (80020f0 <HAL_RCC_OscConfig+0x4b0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a75      	ldr	r2, [pc, #468]	; (80020f0 <HAL_RCC_OscConfig+0x4b0>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f22:	f7ff f8a3 	bl	800106c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2a:	f7ff f89f 	bl	800106c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e118      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3c:	4b6c      	ldr	r3, [pc, #432]	; (80020f0 <HAL_RCC_OscConfig+0x4b0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d106      	bne.n	8001f5e <HAL_RCC_OscConfig+0x31e>
 8001f50:	4b66      	ldr	r3, [pc, #408]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f54:	4a65      	ldr	r2, [pc, #404]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f5c:	e01c      	b.n	8001f98 <HAL_RCC_OscConfig+0x358>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b05      	cmp	r3, #5
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x340>
 8001f66:	4b61      	ldr	r3, [pc, #388]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a60      	ldr	r2, [pc, #384]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f6c:	f043 0304 	orr.w	r3, r3, #4
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
 8001f72:	4b5e      	ldr	r3, [pc, #376]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	4a5d      	ldr	r2, [pc, #372]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0x358>
 8001f80:	4b5a      	ldr	r3, [pc, #360]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	4a59      	ldr	r2, [pc, #356]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f86:	f023 0301 	bic.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8c:	4b57      	ldr	r3, [pc, #348]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a56      	ldr	r2, [pc, #344]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001f92:	f023 0304 	bic.w	r3, r3, #4
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d015      	beq.n	8001fcc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa0:	f7ff f864 	bl	800106c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fa8:	f7ff f860 	bl	800106c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e0d7      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fbe:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0ee      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x368>
 8001fca:	e014      	b.n	8001ff6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fcc:	f7ff f84e 	bl	800106c <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd4:	f7ff f84a 	bl	800106c <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e0c1      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fea:	4b40      	ldr	r3, [pc, #256]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1ee      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ff6:	7dfb      	ldrb	r3, [r7, #23]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	4a3a      	ldr	r2, [pc, #232]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8002002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002006:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80ad 	beq.w	800216c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002012:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b08      	cmp	r3, #8
 800201c:	d060      	beq.n	80020e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d145      	bne.n	80020b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002026:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <HAL_RCC_OscConfig+0x4b4>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff f81e 	bl	800106c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002034:	f7ff f81a 	bl	800106c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e093      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	4b29      	ldr	r3, [pc, #164]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69da      	ldr	r2, [r3, #28]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	019b      	lsls	r3, r3, #6
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	085b      	lsrs	r3, r3, #1
 800206a:	3b01      	subs	r3, #1
 800206c:	041b      	lsls	r3, r3, #16
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	061b      	lsls	r3, r3, #24
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	071b      	lsls	r3, r3, #28
 800207e:	491b      	ldr	r1, [pc, #108]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002084:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <HAL_RCC_OscConfig+0x4b4>)
 8002086:	2201      	movs	r2, #1
 8002088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208a:	f7fe ffef 	bl	800106c <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002090:	e008      	b.n	80020a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002092:	f7fe ffeb 	bl	800106c <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b02      	cmp	r3, #2
 800209e:	d901      	bls.n	80020a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e064      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCC_OscConfig+0x452>
 80020b0:	e05c      	b.n	800216c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_OscConfig+0x4b4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe ffd8 	bl	800106c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe ffd4 	bl	800106c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e04d      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_RCC_OscConfig+0x4ac>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x480>
 80020de:	e045      	b.n	800216c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d107      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e040      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40007000 	.word	0x40007000
 80020f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <HAL_RCC_OscConfig+0x538>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d030      	beq.n	8002168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002110:	429a      	cmp	r2, r3
 8002112:	d129      	bne.n	8002168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d122      	bne.n	8002168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800212e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002130:	4293      	cmp	r3, r2
 8002132:	d119      	bne.n	8002168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	085b      	lsrs	r3, r3, #1
 8002140:	3b01      	subs	r3, #1
 8002142:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002144:	429a      	cmp	r2, r3
 8002146:	d10f      	bne.n	8002168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002154:	429a      	cmp	r2, r3
 8002156:	d107      	bne.n	8002168 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800

0800217c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e03f      	b.n	800220e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7fe fe4e 	bl	8000e44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2224      	movs	r2, #36	; 0x24
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f829 	bl	8002218 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695a      	ldr	r2, [r3, #20]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800221c:	b0c0      	sub	sp, #256	; 0x100
 800221e:	af00      	add	r7, sp, #0
 8002220:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002234:	68d9      	ldr	r1, [r3, #12]
 8002236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	ea40 0301 	orr.w	r3, r0, r1
 8002240:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	431a      	orrs	r2, r3
 8002250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	431a      	orrs	r2, r3
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002270:	f021 010c 	bic.w	r1, r1, #12
 8002274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800227e:	430b      	orrs	r3, r1
 8002280:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800228e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002292:	6999      	ldr	r1, [r3, #24]
 8002294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	ea40 0301 	orr.w	r3, r0, r1
 800229e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80022a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b8f      	ldr	r3, [pc, #572]	; (80024e4 <UART_SetConfig+0x2cc>)
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d005      	beq.n	80022b8 <UART_SetConfig+0xa0>
 80022ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b8d      	ldr	r3, [pc, #564]	; (80024e8 <UART_SetConfig+0x2d0>)
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d104      	bne.n	80022c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022b8:	f7ff fa7e 	bl	80017b8 <HAL_RCC_GetPCLK2Freq>
 80022bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80022c0:	e003      	b.n	80022ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022c2:	f7ff fa65 	bl	8001790 <HAL_RCC_GetPCLK1Freq>
 80022c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d4:	f040 810c 	bne.w	80024f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022dc:	2200      	movs	r2, #0
 80022de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80022ea:	4622      	mov	r2, r4
 80022ec:	462b      	mov	r3, r5
 80022ee:	1891      	adds	r1, r2, r2
 80022f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80022f2:	415b      	adcs	r3, r3
 80022f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022fa:	4621      	mov	r1, r4
 80022fc:	eb12 0801 	adds.w	r8, r2, r1
 8002300:	4629      	mov	r1, r5
 8002302:	eb43 0901 	adc.w	r9, r3, r1
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002312:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002316:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800231a:	4690      	mov	r8, r2
 800231c:	4699      	mov	r9, r3
 800231e:	4623      	mov	r3, r4
 8002320:	eb18 0303 	adds.w	r3, r8, r3
 8002324:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002328:	462b      	mov	r3, r5
 800232a:	eb49 0303 	adc.w	r3, r9, r3
 800232e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800233e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002342:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002346:	460b      	mov	r3, r1
 8002348:	18db      	adds	r3, r3, r3
 800234a:	653b      	str	r3, [r7, #80]	; 0x50
 800234c:	4613      	mov	r3, r2
 800234e:	eb42 0303 	adc.w	r3, r2, r3
 8002352:	657b      	str	r3, [r7, #84]	; 0x54
 8002354:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002358:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800235c:	f7fd ffbe 	bl	80002dc <__aeabi_uldivmod>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4b61      	ldr	r3, [pc, #388]	; (80024ec <UART_SetConfig+0x2d4>)
 8002366:	fba3 2302 	umull	r2, r3, r3, r2
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	011c      	lsls	r4, r3, #4
 800236e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002372:	2200      	movs	r2, #0
 8002374:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002378:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800237c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002380:	4642      	mov	r2, r8
 8002382:	464b      	mov	r3, r9
 8002384:	1891      	adds	r1, r2, r2
 8002386:	64b9      	str	r1, [r7, #72]	; 0x48
 8002388:	415b      	adcs	r3, r3
 800238a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800238c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002390:	4641      	mov	r1, r8
 8002392:	eb12 0a01 	adds.w	sl, r2, r1
 8002396:	4649      	mov	r1, r9
 8002398:	eb43 0b01 	adc.w	fp, r3, r1
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023b0:	4692      	mov	sl, r2
 80023b2:	469b      	mov	fp, r3
 80023b4:	4643      	mov	r3, r8
 80023b6:	eb1a 0303 	adds.w	r3, sl, r3
 80023ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023be:	464b      	mov	r3, r9
 80023c0:	eb4b 0303 	adc.w	r3, fp, r3
 80023c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80023d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023dc:	460b      	mov	r3, r1
 80023de:	18db      	adds	r3, r3, r3
 80023e0:	643b      	str	r3, [r7, #64]	; 0x40
 80023e2:	4613      	mov	r3, r2
 80023e4:	eb42 0303 	adc.w	r3, r2, r3
 80023e8:	647b      	str	r3, [r7, #68]	; 0x44
 80023ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80023f2:	f7fd ff73 	bl	80002dc <__aeabi_uldivmod>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4611      	mov	r1, r2
 80023fc:	4b3b      	ldr	r3, [pc, #236]	; (80024ec <UART_SetConfig+0x2d4>)
 80023fe:	fba3 2301 	umull	r2, r3, r3, r1
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2264      	movs	r2, #100	; 0x64
 8002406:	fb02 f303 	mul.w	r3, r2, r3
 800240a:	1acb      	subs	r3, r1, r3
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002412:	4b36      	ldr	r3, [pc, #216]	; (80024ec <UART_SetConfig+0x2d4>)
 8002414:	fba3 2302 	umull	r2, r3, r3, r2
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002420:	441c      	add	r4, r3
 8002422:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002426:	2200      	movs	r2, #0
 8002428:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800242c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002430:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002434:	4642      	mov	r2, r8
 8002436:	464b      	mov	r3, r9
 8002438:	1891      	adds	r1, r2, r2
 800243a:	63b9      	str	r1, [r7, #56]	; 0x38
 800243c:	415b      	adcs	r3, r3
 800243e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002440:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002444:	4641      	mov	r1, r8
 8002446:	1851      	adds	r1, r2, r1
 8002448:	6339      	str	r1, [r7, #48]	; 0x30
 800244a:	4649      	mov	r1, r9
 800244c:	414b      	adcs	r3, r1
 800244e:	637b      	str	r3, [r7, #52]	; 0x34
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800245c:	4659      	mov	r1, fp
 800245e:	00cb      	lsls	r3, r1, #3
 8002460:	4651      	mov	r1, sl
 8002462:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002466:	4651      	mov	r1, sl
 8002468:	00ca      	lsls	r2, r1, #3
 800246a:	4610      	mov	r0, r2
 800246c:	4619      	mov	r1, r3
 800246e:	4603      	mov	r3, r0
 8002470:	4642      	mov	r2, r8
 8002472:	189b      	adds	r3, r3, r2
 8002474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002478:	464b      	mov	r3, r9
 800247a:	460a      	mov	r2, r1
 800247c:	eb42 0303 	adc.w	r3, r2, r3
 8002480:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002490:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002494:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002498:	460b      	mov	r3, r1
 800249a:	18db      	adds	r3, r3, r3
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
 800249e:	4613      	mov	r3, r2
 80024a0:	eb42 0303 	adc.w	r3, r2, r3
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80024ae:	f7fd ff15 	bl	80002dc <__aeabi_uldivmod>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <UART_SetConfig+0x2d4>)
 80024b8:	fba3 1302 	umull	r1, r3, r3, r2
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	2164      	movs	r1, #100	; 0x64
 80024c0:	fb01 f303 	mul.w	r3, r1, r3
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	3332      	adds	r3, #50	; 0x32
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <UART_SetConfig+0x2d4>)
 80024cc:	fba2 2303 	umull	r2, r3, r2, r3
 80024d0:	095b      	lsrs	r3, r3, #5
 80024d2:	f003 0207 	and.w	r2, r3, #7
 80024d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4422      	add	r2, r4
 80024de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024e0:	e106      	b.n	80026f0 <UART_SetConfig+0x4d8>
 80024e2:	bf00      	nop
 80024e4:	40011000 	.word	0x40011000
 80024e8:	40011400 	.word	0x40011400
 80024ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024f4:	2200      	movs	r2, #0
 80024f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002502:	4642      	mov	r2, r8
 8002504:	464b      	mov	r3, r9
 8002506:	1891      	adds	r1, r2, r2
 8002508:	6239      	str	r1, [r7, #32]
 800250a:	415b      	adcs	r3, r3
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
 800250e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002512:	4641      	mov	r1, r8
 8002514:	1854      	adds	r4, r2, r1
 8002516:	4649      	mov	r1, r9
 8002518:	eb43 0501 	adc.w	r5, r3, r1
 800251c:	f04f 0200 	mov.w	r2, #0
 8002520:	f04f 0300 	mov.w	r3, #0
 8002524:	00eb      	lsls	r3, r5, #3
 8002526:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800252a:	00e2      	lsls	r2, r4, #3
 800252c:	4614      	mov	r4, r2
 800252e:	461d      	mov	r5, r3
 8002530:	4643      	mov	r3, r8
 8002532:	18e3      	adds	r3, r4, r3
 8002534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002538:	464b      	mov	r3, r9
 800253a:	eb45 0303 	adc.w	r3, r5, r3
 800253e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800254e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800255e:	4629      	mov	r1, r5
 8002560:	008b      	lsls	r3, r1, #2
 8002562:	4621      	mov	r1, r4
 8002564:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002568:	4621      	mov	r1, r4
 800256a:	008a      	lsls	r2, r1, #2
 800256c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002570:	f7fd feb4 	bl	80002dc <__aeabi_uldivmod>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4b60      	ldr	r3, [pc, #384]	; (80026fc <UART_SetConfig+0x4e4>)
 800257a:	fba3 2302 	umull	r2, r3, r3, r2
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	011c      	lsls	r4, r3, #4
 8002582:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002586:	2200      	movs	r2, #0
 8002588:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800258c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002590:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002594:	4642      	mov	r2, r8
 8002596:	464b      	mov	r3, r9
 8002598:	1891      	adds	r1, r2, r2
 800259a:	61b9      	str	r1, [r7, #24]
 800259c:	415b      	adcs	r3, r3
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025a4:	4641      	mov	r1, r8
 80025a6:	1851      	adds	r1, r2, r1
 80025a8:	6139      	str	r1, [r7, #16]
 80025aa:	4649      	mov	r1, r9
 80025ac:	414b      	adcs	r3, r1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025bc:	4659      	mov	r1, fp
 80025be:	00cb      	lsls	r3, r1, #3
 80025c0:	4651      	mov	r1, sl
 80025c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025c6:	4651      	mov	r1, sl
 80025c8:	00ca      	lsls	r2, r1, #3
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	4642      	mov	r2, r8
 80025d2:	189b      	adds	r3, r3, r2
 80025d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025d8:	464b      	mov	r3, r9
 80025da:	460a      	mov	r2, r1
 80025dc:	eb42 0303 	adc.w	r3, r2, r3
 80025e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80025ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80025fc:	4649      	mov	r1, r9
 80025fe:	008b      	lsls	r3, r1, #2
 8002600:	4641      	mov	r1, r8
 8002602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002606:	4641      	mov	r1, r8
 8002608:	008a      	lsls	r2, r1, #2
 800260a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800260e:	f7fd fe65 	bl	80002dc <__aeabi_uldivmod>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4611      	mov	r1, r2
 8002618:	4b38      	ldr	r3, [pc, #224]	; (80026fc <UART_SetConfig+0x4e4>)
 800261a:	fba3 2301 	umull	r2, r3, r3, r1
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2264      	movs	r2, #100	; 0x64
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	1acb      	subs	r3, r1, r3
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	3332      	adds	r3, #50	; 0x32
 800262c:	4a33      	ldr	r2, [pc, #204]	; (80026fc <UART_SetConfig+0x4e4>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	095b      	lsrs	r3, r3, #5
 8002634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002638:	441c      	add	r4, r3
 800263a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800263e:	2200      	movs	r2, #0
 8002640:	673b      	str	r3, [r7, #112]	; 0x70
 8002642:	677a      	str	r2, [r7, #116]	; 0x74
 8002644:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002648:	4642      	mov	r2, r8
 800264a:	464b      	mov	r3, r9
 800264c:	1891      	adds	r1, r2, r2
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	415b      	adcs	r3, r3
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002658:	4641      	mov	r1, r8
 800265a:	1851      	adds	r1, r2, r1
 800265c:	6039      	str	r1, [r7, #0]
 800265e:	4649      	mov	r1, r9
 8002660:	414b      	adcs	r3, r1
 8002662:	607b      	str	r3, [r7, #4]
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002670:	4659      	mov	r1, fp
 8002672:	00cb      	lsls	r3, r1, #3
 8002674:	4651      	mov	r1, sl
 8002676:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800267a:	4651      	mov	r1, sl
 800267c:	00ca      	lsls	r2, r1, #3
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	4603      	mov	r3, r0
 8002684:	4642      	mov	r2, r8
 8002686:	189b      	adds	r3, r3, r2
 8002688:	66bb      	str	r3, [r7, #104]	; 0x68
 800268a:	464b      	mov	r3, r9
 800268c:	460a      	mov	r2, r1
 800268e:	eb42 0303 	adc.w	r3, r2, r3
 8002692:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	663b      	str	r3, [r7, #96]	; 0x60
 800269e:	667a      	str	r2, [r7, #100]	; 0x64
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80026ac:	4649      	mov	r1, r9
 80026ae:	008b      	lsls	r3, r1, #2
 80026b0:	4641      	mov	r1, r8
 80026b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026b6:	4641      	mov	r1, r8
 80026b8:	008a      	lsls	r2, r1, #2
 80026ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026be:	f7fd fe0d 	bl	80002dc <__aeabi_uldivmod>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <UART_SetConfig+0x4e4>)
 80026c8:	fba3 1302 	umull	r1, r3, r3, r2
 80026cc:	095b      	lsrs	r3, r3, #5
 80026ce:	2164      	movs	r1, #100	; 0x64
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	3332      	adds	r3, #50	; 0x32
 80026da:	4a08      	ldr	r2, [pc, #32]	; (80026fc <UART_SetConfig+0x4e4>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	095b      	lsrs	r3, r3, #5
 80026e2:	f003 020f 	and.w	r2, r3, #15
 80026e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4422      	add	r2, r4
 80026ee:	609a      	str	r2, [r3, #8]
}
 80026f0:	bf00      	nop
 80026f2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80026f6:	46bd      	mov	sp, r7
 80026f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026fc:	51eb851f 	.word	0x51eb851f

08002700 <memset>:
 8002700:	4402      	add	r2, r0
 8002702:	4603      	mov	r3, r0
 8002704:	4293      	cmp	r3, r2
 8002706:	d100      	bne.n	800270a <memset+0xa>
 8002708:	4770      	bx	lr
 800270a:	f803 1b01 	strb.w	r1, [r3], #1
 800270e:	e7f9      	b.n	8002704 <memset+0x4>

08002710 <__libc_init_array>:
 8002710:	b570      	push	{r4, r5, r6, lr}
 8002712:	4d0d      	ldr	r5, [pc, #52]	; (8002748 <__libc_init_array+0x38>)
 8002714:	4c0d      	ldr	r4, [pc, #52]	; (800274c <__libc_init_array+0x3c>)
 8002716:	1b64      	subs	r4, r4, r5
 8002718:	10a4      	asrs	r4, r4, #2
 800271a:	2600      	movs	r6, #0
 800271c:	42a6      	cmp	r6, r4
 800271e:	d109      	bne.n	8002734 <__libc_init_array+0x24>
 8002720:	4d0b      	ldr	r5, [pc, #44]	; (8002750 <__libc_init_array+0x40>)
 8002722:	4c0c      	ldr	r4, [pc, #48]	; (8002754 <__libc_init_array+0x44>)
 8002724:	f000 f818 	bl	8002758 <_init>
 8002728:	1b64      	subs	r4, r4, r5
 800272a:	10a4      	asrs	r4, r4, #2
 800272c:	2600      	movs	r6, #0
 800272e:	42a6      	cmp	r6, r4
 8002730:	d105      	bne.n	800273e <__libc_init_array+0x2e>
 8002732:	bd70      	pop	{r4, r5, r6, pc}
 8002734:	f855 3b04 	ldr.w	r3, [r5], #4
 8002738:	4798      	blx	r3
 800273a:	3601      	adds	r6, #1
 800273c:	e7ee      	b.n	800271c <__libc_init_array+0xc>
 800273e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002742:	4798      	blx	r3
 8002744:	3601      	adds	r6, #1
 8002746:	e7f2      	b.n	800272e <__libc_init_array+0x1e>
 8002748:	08002808 	.word	0x08002808
 800274c:	08002808 	.word	0x08002808
 8002750:	08002808 	.word	0x08002808
 8002754:	0800280c 	.word	0x0800280c

08002758 <_init>:
 8002758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800275a:	bf00      	nop
 800275c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800275e:	bc08      	pop	{r3}
 8002760:	469e      	mov	lr, r3
 8002762:	4770      	bx	lr

08002764 <_fini>:
 8002764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002766:	bf00      	nop
 8002768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800276a:	bc08      	pop	{r3}
 800276c:	469e      	mov	lr, r3
 800276e:	4770      	bx	lr
